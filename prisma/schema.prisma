// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount", "orderByRelation"]
}

model TripLocation {
  id       Int  @id @default(autoincrement())
  tripId   Int
  trip     Trip @relation(fields: [tripId], references: [id])
  // {city, province, country}
  location Json
  order    Int
}

model TripTransport {
  id        Int       @id @default(autoincrement())
  tripId    Int
  trip      Trip      @relation(fields: [tripId], references: [id])
  transport Transport
}

model Trip {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  title             String
  tripBeginTime     DateTime
  tripEndTime       DateTime
  description       String            @db.VarChar(4000)
  teamSize          TeamSize
  author            User              @relation(fields: [authorId], references: [id])
  authorId          Int
  expectedExpense   Decimal
  genderRequirement GenderRequirement
  reservations      Reservation[]
  locations         TripLocation[]
  transports        TripTransport[]
}

enum TeamSize {
  ONE_THREE
  FOUR_SIX
  SEVEN_NINE
}

enum Transport {
  CYCLING
  DRIVING
  TREKKING
}

enum Gender {
  MALE
  FEMALE
}

enum GenderRequirement {
  MALE
  FEMALE
  ANY
}

enum ReservationStatus {
  PENDING
  APPROVED
}

model Reservation {
  id     Int               @id @default(autoincrement())
  userId Int
  user   User              @relation(fields: [userId], references: [id])
  tripId Int
  trip   Trip              @relation(fields: [tripId], references: [id])
  status ReservationStatus

  @@unique([tripId, userId])
}

model Ban {
  id       Int  @id @default(autoincrement())
  bannerId Int
  banner   User @relation(name: "banner", fields: [bannerId], references: [id])
  bannedId Int
  banned   User @relation(name: "banned", fields: [bannedId], references: [id])
}

model User {
  id         Int     @id @default(autoincrement())
  email      String
  password   String
  name       String  @default("")
  selfIntro  String  @default("") @db.VarChar(4000)
  avatarHash String?
  avatar     Image?  @relation(fields: [avatarHash], references: [hash])

  gender Gender

  // TODO user experience rank system
  bans         Ban[]         @relation("banner")
  bannedBy     Ban[]         @relation("banned")
  reservations Reservation[]
  trips        Trip[]

  @@unique([email])
}

model Image {
  hash        String @id
  content     Bytes
  avatarUsers User[]
}
